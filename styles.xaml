<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Style x:Key="TitleTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FrameworkElement.Width" Value="200" />
    <Setter Property="FrameworkElement.Height" Value="36" />
    <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
    <Setter Property="TextBlock.FontSize" Value="24" />
  </Style>
  <Style x:Key="LeftButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Width" Value="200" />
    <Setter Property="FrameworkElement.Height" Value="36" />
    <Setter Property="Control.Padding" Value="2" />
    <Setter Property="Control.Background" Value="#FFFFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#FF32A6E8" />
    <Setter Property="Control.BorderThickness" Value="2" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="#FF000000" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ButtonTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FrameworkElement.Width" Value="160" />
    <Setter Property="FrameworkElement.Height" Value="26" />
    <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
    <Setter Property="TextBlock.FontSize" Value="20" />
    <Setter Property="TextBlock.Foreground" Value="#FFFFFFFF" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="TextBlock.Foreground" Value="#FF000000" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
  <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#FFF" Offset="1.0" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#FFF" Offset="0.1" />
    <GradientStop Color="#FFF" Offset="0.9" />
    <GradientStop Color="#FFF" Offset="1.0" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
  <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#FFF" Offset="1.0" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#FFF" Offset="1.0" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#FFF" Offset="1.0" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#FFF" Offset="1.0" />
  </LinearGradientBrush>
  <Style x:Key="SimpleRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" />
            <ContentPresenter Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Value="{DynamicResource PressedBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource PressedBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SimpleButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource MouseOverBrush}" Property="Control.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
  </Style>
</ResourceDictionary>